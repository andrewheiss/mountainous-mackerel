{
  "hash": "a42b544c7d5c1bfd82085f2492496451",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Targets pipeline\"\nformat:\n  html:\n    code-fold: true\n---\n\n\n\n\n\n\n# targets pipeline\n\nWe use [the magical {targets} package](https://docs.ropensci.org/targets/) to run our analysis and keep track of all dependencies automatically.\n\nTo build our entire project, run `targets::tar_make()` at the R console.\n\nHere's our complete pipeline:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-858d4a25f98f2a513d93\" style=\"width:80%;height:1112.4px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-858d4a25f98f2a513d93\">{\"x\":{\"nodes\":{\"name\":[\"diagnostic_functions\",\"data_quarterly_stata\",\"vdem_raw_file\",\"m_policies\",\"naturalearth_raw_file\",\"readme\",\"graphic_functions\",\"data_weekly_rds_website\",\"iccpr_treaty_action_file\",\"data_quarterly_rds_website\",\"oxford_raw_file\",\"data_weekly_stata\",\"vdem_clean\",\"modelsummary_functions\",\"policies_table_data\",\"year_week_lookup\",\"derogation_count\",\"data_weekly_stata_website\",\"deploy\",\"year_quarter_lookup\",\"iccpr_action_clean\",\"world_map\",\"human_rights_plot_data\",\"data_weekly_csv\",\"models_tbl_human_rights\",\"data_quarterly_stata_website\",\"deploy_script\",\"iccpr_who_clean\",\"oxford_clean\",\"who_subregion_raw_file\",\"pandem_clean\",\"data_weekly_csv_website\",\"models_tbl_policies\",\"derogation_map_data\",\"data_weekly_rds\",\"pandem_raw_file\",\"daily_panel\",\"weekly_panel\",\"policies_plot_data\",\"website\",\"data_quarterly_csv_website\",\"data_quarterly_csv\",\"quarterly_panel\",\"m_human_rights\",\"manuscript\",\"hr_table_data\",\"data_quarterly_rds\",\"iccpr_who_raw_file\",\"skeleton\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\"],\"description\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"status\":[\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"],\"seconds\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"bytes\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"label\":[\"diagnostic_functions\",\"data_quarterly_stata\",\"vdem_raw_file\",\"m_policies\",\"naturalearth_raw_file\",\"readme\",\"graphic_functions\",\"data_weekly_rds_website\",\"iccpr_treaty_action_file\",\"data_quarterly_rds_website\",\"oxford_raw_file\",\"data_weekly_stata\",\"vdem_clean\",\"modelsummary_functions\",\"policies_table_data\",\"year_week_lookup\",\"derogation_count\",\"data_weekly_stata_website\",\"deploy\",\"year_quarter_lookup\",\"iccpr_action_clean\",\"world_map\",\"human_rights_plot_data\",\"data_weekly_csv\",\"models_tbl_human_rights\",\"data_quarterly_stata_website\",\"deploy_script\",\"iccpr_who_clean\",\"oxford_clean\",\"who_subregion_raw_file\",\"pandem_clean\",\"data_weekly_csv_website\",\"models_tbl_policies\",\"derogation_map_data\",\"data_weekly_rds\",\"pandem_raw_file\",\"daily_panel\",\"weekly_panel\",\"policies_plot_data\",\"website\",\"data_quarterly_csv_website\",\"data_quarterly_csv\",\"quarterly_panel\",\"m_human_rights\",\"manuscript\",\"hr_table_data\",\"data_quarterly_rds\",\"iccpr_who_raw_file\",\"skeleton\"],\"color\":[\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\"],\"id\":[\"diagnostic_functions\",\"data_quarterly_stata\",\"vdem_raw_file\",\"m_policies\",\"naturalearth_raw_file\",\"readme\",\"graphic_functions\",\"data_weekly_rds_website\",\"iccpr_treaty_action_file\",\"data_quarterly_rds_website\",\"oxford_raw_file\",\"data_weekly_stata\",\"vdem_clean\",\"modelsummary_functions\",\"policies_table_data\",\"year_week_lookup\",\"derogation_count\",\"data_weekly_stata_website\",\"deploy\",\"year_quarter_lookup\",\"iccpr_action_clean\",\"world_map\",\"human_rights_plot_data\",\"data_weekly_csv\",\"models_tbl_human_rights\",\"data_quarterly_stata_website\",\"deploy_script\",\"iccpr_who_clean\",\"oxford_clean\",\"who_subregion_raw_file\",\"pandem_clean\",\"data_weekly_csv_website\",\"models_tbl_policies\",\"derogation_map_data\",\"data_weekly_rds\",\"pandem_raw_file\",\"daily_panel\",\"weekly_panel\",\"policies_plot_data\",\"website\",\"data_quarterly_csv_website\",\"data_quarterly_csv\",\"quarterly_panel\",\"m_human_rights\",\"manuscript\",\"hr_table_data\",\"data_quarterly_rds\",\"iccpr_who_raw_file\",\"skeleton\"],\"level\":[1,6,1,6,1,10,1,6,1,6,1,6,2,1,8,6,3,6,11,6,2,2,7,6,7,6,1,2,2,1,2,6,7,4,6,1,4,5,7,10,6,6,5,6,9,8,6,1,3],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\"]},\"edges\":{\"from\":[\"quarterly_panel\",\"weekly_panel\",\"manuscript\",\"weekly_panel\",\"quarterly_panel\",\"weekly_panel\",\"vdem_raw_file\",\"policies_plot_data\",\"weekly_panel\",\"iccpr_who_clean\",\"weekly_panel\",\"deploy_script\",\"website\",\"quarterly_panel\",\"iccpr_treaty_action_file\",\"naturalearth_raw_file\",\"m_human_rights\",\"year_quarter_lookup\",\"weekly_panel\",\"m_human_rights\",\"quarterly_panel\",\"iccpr_who_raw_file\",\"who_subregion_raw_file\",\"oxford_raw_file\",\"pandem_raw_file\",\"weekly_panel\",\"m_policies\",\"derogation_count\",\"world_map\",\"weekly_panel\",\"iccpr_action_clean\",\"iccpr_who_clean\",\"oxford_clean\",\"pandem_clean\",\"skeleton\",\"vdem_clean\",\"daily_panel\",\"m_policies\",\"year_week_lookup\",\"daily_panel\",\"data_quarterly_csv\",\"data_quarterly_csv_website\",\"data_quarterly_rds\",\"data_quarterly_rds_website\",\"data_quarterly_stata\",\"data_quarterly_stata_website\",\"data_weekly_csv\",\"data_weekly_csv_website\",\"data_weekly_rds\",\"data_weekly_rds_website\",\"data_weekly_stata\",\"data_weekly_stata_website\",\"derogation_map_data\",\"diagnostic_functions\",\"graphic_functions\",\"human_rights_plot_data\",\"m_human_rights\",\"m_policies\",\"manuscript\",\"models_tbl_human_rights\",\"models_tbl_policies\",\"modelsummary_functions\",\"policies_plot_data\",\"weekly_panel\",\"year_week_lookup\",\"quarterly_panel\",\"quarterly_panel\",\"daily_panel\",\"quarterly_panel\",\"derogation_count\",\"derogation_map_data\",\"graphic_functions\",\"hr_table_data\",\"human_rights_plot_data\",\"iccpr_who_clean\",\"models_tbl_human_rights\",\"models_tbl_policies\",\"modelsummary_functions\",\"policies_plot_data\",\"policies_table_data\",\"quarterly_panel\",\"weekly_panel\",\"year_quarter_lookup\",\"human_rights_plot_data\",\"quarterly_panel\",\"iccpr_who_clean\",\"oxford_clean\",\"pandem_clean\",\"vdem_clean\"],\"to\":[\"data_quarterly_stata\",\"m_policies\",\"readme\",\"data_weekly_rds_website\",\"data_quarterly_rds_website\",\"data_weekly_stata\",\"vdem_clean\",\"policies_table_data\",\"year_week_lookup\",\"derogation_count\",\"data_weekly_stata_website\",\"deploy\",\"deploy\",\"year_quarter_lookup\",\"iccpr_action_clean\",\"world_map\",\"human_rights_plot_data\",\"human_rights_plot_data\",\"data_weekly_csv\",\"models_tbl_human_rights\",\"data_quarterly_stata_website\",\"iccpr_who_clean\",\"iccpr_who_clean\",\"oxford_clean\",\"pandem_clean\",\"data_weekly_csv_website\",\"models_tbl_policies\",\"derogation_map_data\",\"derogation_map_data\",\"data_weekly_rds\",\"daily_panel\",\"daily_panel\",\"daily_panel\",\"daily_panel\",\"daily_panel\",\"daily_panel\",\"weekly_panel\",\"policies_plot_data\",\"policies_plot_data\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"website\",\"data_quarterly_csv_website\",\"data_quarterly_csv\",\"quarterly_panel\",\"m_human_rights\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"manuscript\",\"hr_table_data\",\"data_quarterly_rds\",\"skeleton\",\"skeleton\",\"skeleton\",\"skeleton\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Stem\"],\"shape\":[\"dot\"],\"color\":[\"#899DA4\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n# Actual code\n\nAll the data processing is handled with dataset-specific functions that live in `R/funs_data-cleaning.R`, which **`targets`** then runs as needed. For the sake of transparency, here's that code:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n#### `R/funs_data-cleaning.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(readxl)\nsuppressPackageStartupMessages(library(lubridate))\nsuppressPackageStartupMessages(library(clock))\nlibrary(countrycode)\nlibrary(jsonlite)\nsuppressPackageStartupMessages(library(sf))\n\nclean_iccpr_who <- function(path, subregions_path) {\n  who_regions <- tribble(\n    ~who_region, ~who_region_long,\n    \"AFRO\", \"Regional Office for Africa\",\n    \"AMRO\", \"Regional Office for the Americas\",\n    \"SEARO\", \"Regional Office for South-East Asia\",\n    \"EURO\", \"Regional Office for Europe\",\n    \"EMRO\", \"Regional Office for the Eastern Mediterranean\",\n    \"WPRO\", \"Regional Office for the Western Pacific\"\n  )\n  \n  who_subregions_manual <- tribble(\n    ~member_states, ~region_abbr, ~stratum, ~subregion_imputed,\n    \"American Samoa\", \"WPR\", \"B\", TRUE,\n    \"Anguilla\", \"AMR\", \"B\", TRUE,\n    \"Aruba\", \"AMR\", \"B\", TRUE,\n    \"Bermuda\", \"AMR\", \"B\", TRUE,\n    \"British Virgin Islands\", \"AMR\", \"B\", TRUE,\n    \"Cayman Islands\", \"AMR\", \"B\", TRUE,\n    \"Curaçao\", \"AMR\", \"B\", TRUE,\n    \"French Guiana\", \"AMR\", \"B\", TRUE,\n    \"French Polynesia\", \"WPR\", \"B\", TRUE,\n    \"Kosovo\", \"EUR\", \"B\", TRUE,\n    \"Liechtenstein\", \"EUR\", \"A\", TRUE,\n    \"Palestinian Territories\", \"EMR\", \"B\", TRUE,\n    \"St. Barthélemy\", \"AMR\", \"B\", TRUE,\n    \"St. Helena\", \"AFR\", \"E\", TRUE,\n    \"St. Martin (French part)\", \"AMR\", \"B\", TRUE,\n    \"Sint Maarten\", \"AMR\", \"B\", TRUE,\n    \"Turks & Caicos Islands\", \"AMR\", \"B\", TRUE\n  )\n  \n  who_subregions <- read_excel(subregions_path) %>% \n    set_names(c(\"subregions\", \"member_states\")) %>% \n    separate(subregions, into = c(\"region_abbr\", \"stratum\"), sep = \" \") %>% \n    mutate(member_states = str_split(member_states, \"; \")) %>% \n    unnest(member_states) %>% \n    bind_rows(who_subregions_manual) %>% \n    mutate(\n      who_region = paste0(region_abbr, \"O\"),\n      who_subregion = paste0(region_abbr, stratum)\n    ) %>% \n    replace_na(list(subregion_imputed = FALSE)) %>% \n    mutate(\n      country_name = countrycode(\n        member_states, origin = \"country.name\", destination = \"country.name\",\n        custom_match = c(\"Turkey\" = \"Türkiye\")),\n      iso3 = countrycode(\n        country_name, origin = \"country.name\", destination = \"iso3c\",\n        custom_match = c(\"Kosovo\" = \"XKX\"))\n    ) %>% \n    select(iso3, who_subregion, subregion_imputed)\n  \n  x <- read_excel(path) %>% \n    janitor::clean_names() %>% \n    # Make this a date instead of PosixCT\n    mutate(date_reported = as.Date(date_reported)) %>% \n    # All NAs here are actually 0s\n    replace_na(list(iccpr_derogation_filed = 0,\n                    derogation_start = 0,\n                    derogation_ineffect = 0,\n                    derogation_end = 0)) %>% \n    # Country names and codes fun times\n    mutate(\n      country_name = countrycode(\n        country_code, origin = \"iso2c\", destination = \"country.name\",\n        custom_match = c(\"XK\" = \"Kosovo\", \"TR\" = \"Türkiye\")),\n      iso3 = countrycode(\n        country_code, origin = \"iso2c\", destination = \"iso3c\",\n        custom_match = c(\"XK\" = \"XKX\")\n      )\n    ) %>% \n    left_join(who_regions, by = \"who_region\") %>% \n    left_join(who_subregions, by = \"iso3\") %>% \n    # Final column order\n    select(-c(country_code, country, cow_code)) %>% \n    select(country_name, iso3, who_region, who_region_long,\n           who_subregion, subregion_imputed,\n           day = date_reported, everything())\n  \n  return(x)\n}\n\nclean_iccpr_action <- function(path) {\n  x <- read_excel(path) %>% \n    janitor::clean_names() %>% \n    rename(prior_iccpr_other_action = other_prior_iccpr_post_commitment_treaty_actions,\n           country_name = country) %>% \n    mutate(across(starts_with(\"prior_\"), ~case_when(\n      . == 1 ~ TRUE,\n      is.na(.) ~ FALSE\n    )))\n  \n  return(x)\n}\n\nclean_oxford <- function(path) {\n  x <- tibble(\n    # Get a list of all the sheets in the Excel file\n    index_name = excel_sheets(path)\n  ) %>% \n    # Read each sheet\n    mutate(data = map(index_name, ~read_excel(path, sheet = .x))) %>% \n    # Standardize the index name based on the sheet name\n    mutate(index_name = janitor::make_clean_names(index_name)) %>% \n    # Make each data frame cell in the list column long and a little cleaner\n    mutate(clean = map(data, ~{\n      .x %>% \n        pivot_longer(cols = -c(country_code, country_name),\n                     names_to = \"day\", values_to = \"value\") %>% \n        mutate(day = dmy(day))\n    })) %>% \n    # Get rid of the original wide data frame and unnest the long clean data\n    select(-data) %>% \n    unnest(clean) %>% \n    # Make data wide so that there's a column for each index and row for each\n    # country-day\n    pivot_wider(names_from = \"index_name\", values_from = \"value\") %>% \n    # Country names and codes fun times\n    mutate(iso3 = recode(country_code, \"RKS\" = \"XKX\")) %>% \n    mutate(country_name = countrycode(\n      iso3, origin = \"iso3c\", destination = \"country.name\",\n      custom_match = c(\"XKX\" = \"Kosovo\", \"TUR\" = \"Türkiye\")\n    )) %>% \n    # Get rid of countries with all missing data\n    group_by(country_name) %>% \n    filter(!all(is.na(stringency_index))) %>% \n    ungroup() %>% \n    # Shorten these long column names\n    rename(\n      c3_cancel_events = c3_cancel_public_events, \n      c4_gatherings = c4_restrictions_on_gaterings,\n      c5_public_transport = c5_close_public_transport, \n      c6_stay_at_home = c6_stay_at_home_requirements,\n      c7_internal_movement = c7_movement_restrictions_intern, \n      c8_intl_travel = c8_international_travel_control\n    ) %>% \n    # Make binary versions of these columns\n    mutate(across(c(c3_cancel_events, c4_gatherings,\n                    c5_public_transport, c6_stay_at_home,\n                    c7_internal_movement, c8_intl_travel,\n                    e1_income_support, e2_debt_relief),\n                  list(bin = ~ ifelse(. > 0, 1, 0)))) %>% \n    # Create indicators for whether policies were added, removed, or never changed\n    group_by(country_name) %>% \n    mutate(across(c(c3_cancel_events, c4_gatherings,\n                    c5_public_transport, c6_stay_at_home,\n                    c7_internal_movement, c8_intl_travel,\n                    e1_income_support, e2_debt_relief),\n                  list(added = ~any(c(NA, diff(.)) >= 1, na.rm = TRUE),\n                       removed = ~any(c(NA, diff(.)) <= -1, na.rm = TRUE),\n                       never = ~all(c(NA, diff(.)) == 0, na.rm = TRUE)))) %>% \n    ungroup() %>% \n    # Final column order\n    select(-country_code) %>% \n    select(country_name, iso3, day, everything())\n  \n  return(x)\n}\n\nclean_pandem <- function(path) {\n  pandem_raw <- read_excel(path)\n  \n  pandem_levels <- c(\"None\" = \"0\", \"Minor\" = \"1\", \"Moderate\" = \"2\", \"Major\" = \"3\")\n  \n  pandem_clean <- pandem_raw %>% \n    mutate(year_quarter = paste0(year, \"-\", quarter)) %>% \n    mutate(iso3 = countrycode(country_name, \n                              origin = \"country.name\", \n                              destination = \"iso3c\"),\n           country_name = countrycode(iso3, origin = \"iso3c\", \n                                      destination = \"country.name\",\n                                      custom_match = c(\"TUR\" = \"Türkiye\"))) %>% \n    select(country_name, iso3, year, year_quarter, \n           pandem, panback, \n           pandem_discrim = type1, \n           pandem_ndrights = type2,\n           pandem_abusive = type3,\n           pandem_nolimit = type4,\n           pandem_media = type7) %>% \n    # Make these 0-3 columns factors\n    mutate(across(starts_with(\"pandem_\"), ~factor(., levels = pandem_levels, ordered = TRUE))) %>% \n    # Add labels\n    mutate(across(starts_with(\"pandem_\"), ~fct_recode(., !!!pandem_levels))) %>% \n    # Drop unused levels\n    mutate(across(starts_with(\"pandem_\"), ~fct_drop(.)))\n  \n  return(pandem_clean)\n}\n\nclean_vdem <- function(path) {\n  vdem_raw <- read_rds(path) %>% as_tibble()\n  \n  vdem_clean <- vdem_raw %>% \n    filter(year >= 2020) %>% \n    mutate(country_name = countrycode(\n      country_text_id, origin = \"iso3c\", destination = \"country.name\",\n      custom_match = c(\"XKX\" = \"Kosovo\", \"ZZB\" = \"Zanzibar\", \n                       \"PSG\" = \"Palestine (Gaza)\", \"SML\" = \"Somaliland\", \n                       \"TUR\" = \"Türkiye\")\n    )) %>% \n    select(country_name, iso3 = country_text_id, year,\n           \n           # Civil society stuff\n           v2csreprss,  # CSO repression\n           v2xcs_ccsi,  # Core civil society index (entry/exit, repression, participatory env)\n           \n           # Human rights and politics\n           # Political corruption index (less to more, 0-1) (public sector +\n           # executive + legislative + judicial corruption)\n           v2x_corr,\n           v2x_rule,  # Rule of law index\n           \n           # Rights indexes\n           v2x_civlib,  # Civil liberties index\n           v2x_clphy,  # Physical violence index\n           v2x_clpriv,  # Private civil liberties index\n           v2x_clpol,  # Political civil liberties index\n           \n           # Democracy\n           v2x_polyarchy, v2x_libdem, v2x_regime_amb\n    )\n  \n  return(vdem_clean)\n}\n\ncreate_daily_skeleton <- function(iccpr_who, oxford, pandem, vdem) {\n  all_countries <- list(unique(iccpr_who$iso3), \n                        unique(oxford$iso3), \n                        unique(pandem$iso3),\n                        unique(vdem$iso3))\n  \n  countries_in_all_data <- reduce(all_countries, intersect)\n  \n  # first_day <- min(oxford$day)\n  first_day <- ymd(\"2020-03-11\")\n  last_day <- max(oxford$day)\n  \n  daily_skeleton <- expand_grid(\n    iso3 = countries_in_all_data,\n    day = seq(first_day, last_day, by = \"1 day\")\n  ) %>% \n    mutate(year = year(day),\n           year_quarter = quarter(day, type = \"year.quarter\"),\n           day_num = as.numeric(day) - as.numeric(ymd(\"2020-03-10\")),\n           year_week = calendar_narrow(as_iso_year_week_day(day), \"week\"),\n           year_week_day = as_year_month_day(calendar_narrow(set_day(year_week, 1), \"day\")),\n           year_quarter = calendar_narrow(as_year_quarter_day(day), \"quarter\"),\n           year_quarter_day = as_year_month_day(calendar_narrow(set_day(year_quarter, 1), \"day\"))) %>% \n    # Force the year_week column to be text since it's a weird {clock} class\n    mutate(year_week = as.character(year_week),\n           year_week_day = as.character(year_week_day),\n           year_quarter = as.character(year_quarter),\n           year_quarter_day = as.character(year_quarter_day)) %>% \n    # Pandem starts Q2 2020 on March 11 instead of April 1\n    mutate(year_quarter = ifelse(year_quarter == \"2020-Q1\", \"2020-Q2\", year_quarter)) %>% \n    mutate(country_name = countrycode(\n      iso3, origin = \"iso3c\", destination = \"country.name\",\n      custom_match = c(\"XKX\" = \"Kosovo\", \"TUR\" = \"Türkiye\")\n    )) %>% \n    select(country_name, iso3, day, day_num, year, \n           year_quarter, year_quarter_day, year_week, year_week_day)\n  \n  return(daily_skeleton)\n}\n\nmake_final_data <- function(skeleton, iccpr_who, iccpr_action, oxford, pandem, vdem) {\n  daily_final <- skeleton %>% \n    left_join(select(iccpr_who, -country_name), by = c(\"iso3\", \"day\")) %>% \n    left_join(select(iccpr_action, -country_name), by = c(\"iso3\")) %>% \n    left_join(select(oxford, -country_name), by = c(\"iso3\", \"day\")) %>% \n    left_join(select(pandem, -c(country_name, year)), by = c(\"iso3\", \"year_quarter\")) %>% \n    left_join(select(vdem, -country_name), by = c(\"iso3\", \"year\"))\n  \n  return(daily_final)\n}\n\nmake_weekly_data <- function(daily_final) {\n  weekly_final <- daily_final %>% \n    group_by(year_week, year_week_day, country_name, iso3, who_region, who_region_long, \n             who_subregion, prior_iccpr_derogations, prior_iccpr_other_action) %>% \n    summarize(across(c(new_cases, new_deaths), ~sum(., na.rm = TRUE)),\n              across(c(iccpr_derogation_filed, derogation_start, \n                       derogation_ineffect, derogation_end), ~max(., na.rm = TRUE)),\n              across(matches(\"[ce]\\\\d_\"), ~max(., na.rm = TRUE)),\n              across(c(pandem, panback, starts_with(\"pandem_\"), starts_with(\"v2\")), ~max(., na.rm = TRUE))) %>% \n    group_by(country_name) %>% \n    mutate(cumulative_cases = cumsum(new_cases),\n           cumulative_deaths = cumsum(new_deaths)) %>% \n    mutate(year_week_num = 1:n(), .after = \"year_week\") %>% \n    ungroup() %>% \n    arrange(country_name)\n  \n  return(weekly_final)\n}\n\nmake_quarterly_data <- function(daily_final) {\n  quarterly_final <- daily_final %>% \n    group_by(year_quarter, year_quarter_day, country_name, iso3, who_region, who_region_long, \n      who_subregion, prior_iccpr_derogations, prior_iccpr_other_action) %>% \n    summarize(across(c(new_cases, new_deaths), ~sum(., na.rm = TRUE)),\n      across(c(iccpr_derogation_filed, derogation_start, \n        derogation_ineffect, derogation_end), ~max(., na.rm = TRUE)),\n      across(matches(\"[ce]\\\\d_\"), ~max(., na.rm = TRUE)),\n      across(c(pandem, panback, starts_with(\"pandem_\"), starts_with(\"v2\")), ~max(., na.rm = TRUE))) %>% \n    group_by(country_name) %>% \n    mutate(cumulative_cases = cumsum(new_cases),\n      cumulative_deaths = cumsum(new_deaths)) %>% \n    mutate(year_quarter_num = 1:n(), .after = \"year_quarter\") %>%\n    ungroup() %>% \n    arrange(country_name)\n  \n  return(quarterly_final)\n}\n\nmake_year_week_lookup <- function(weekly_final) {\n  year_week_lookup <- weekly_final %>% \n    distinct(year_week, year_week_num, year_week_day) %>% \n    mutate(year_week_day = ymd(year_week_day))\n  \n  return(year_week_lookup)\n}\n\nmake_year_quarter_lookup <- function(quarterly_final) {\n  year_quarter_lookup <- quarterly_final %>% \n    distinct(year_quarter, year_quarter_num, year_quarter_day) %>% \n    mutate(year_quarter_day = ymd(year_quarter_day))\n  \n  return(year_quarter_lookup)\n}\n\nload_world_map <- function(path) {\n  world_map <- read_sf(path) %>%\n    filter(ISO_A3 != \"ATA\")\n  \n  return(world_map)\n}\n\nmake_derogation_count <- function(data) {\n  new_derogations <- data %>% \n    group_by(iso3) %>% \n    summarize(derogations = sum(iccpr_derogation_filed))\n  \n  return(new_derogations)\n}\n\nmake_derogation_map_data <- function(derogation_count, map) {\n  map_with_derogations <- map %>%\n    # Fix some Natural Earth ISO weirdness\n    mutate(ISO_A3 = ifelse(ISO_A3 == \"-99\", as.character(ISO_A3_EH), as.character(ISO_A3))) %>%\n    mutate(ISO_A3 = case_when(\n      .$ISO_A3 == \"GRL\" ~ \"DNK\",\n      .$NAME == \"Norway\" ~ \"NOR\",\n      .$NAME == \"Kosovo\" ~ \"XKK\",\n      TRUE ~ ISO_A3\n    )) %>%\n    left_join(derogation_count, by = join_by(ISO_A3 == iso3)) %>% \n    mutate(derogations_1plus = ifelse(derogations == 0, NA, derogations))\n  \n  return(map_with_derogations)\n}\n\n# When using a file-based target, {targets} requires that the function that\n# saves the file returns a path to the file. write_csv() and write_dta() both\n# invisibly return the data frame being written, and saveRDS() returns NULL, so\n# we need some wrapper functions to save the files and return the paths.\nsave_csv <- function(df, path) {\n  readr::write_csv(df, path)\n  return(path)\n}\n\nsave_r <- function(df, path) {\n  saveRDS(df, path)\n  return(path)\n}\n\nsave_dta <- function(df, path) {\n  haven::write_dta(df, path)\n  return(path)\n}\n```\n:::\n\n\n\n\n\n#### `R/funs_graphics.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclrs <- MetBrewer::met.brewer(\"Tiepolo\")\n\nset_annotation_fonts <- function() {\n  ggplot2::update_geom_defaults(\"label\", list(family = \"Noto Sans\", face = \"plain\"))\n  ggplot2::update_geom_defaults(\"text\", list(family = \"Noto Sans\", face = \"plain\"))\n}\n\ntheme_pandem <- function(base_size = 11, base_family = \"Noto Sans\", prior = FALSE) {\n  ret <- theme_bw(base_size, base_family) +\n    theme(panel.background = element_rect(fill = \"#ffffff\", colour = NA),\n          title = element_text(size = rel(1), family = \"Noto Sans\", face = \"bold\"),\n          plot.subtitle = element_text(size = rel(0.8),\n                                       family = \"Noto Sans\", face = \"plain\"),\n          plot.caption = element_text(margin = margin(t = 10), size = rel(0.6),\n                                      family = \"Noto Sans\", face = \"plain\"),\n          panel.border = element_rect(color = \"grey50\", fill = NA, linewidth = 0.15),\n          panel.spacing = unit(1, \"lines\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major = element_line(linewidth = 0.25, colour = \"grey90\"),\n          axis.line = element_blank(),\n          axis.ticks = element_blank(),\n          axis.title = element_text(size = rel(0.8),\n                                    family = \"Noto Sans\", face = \"bold\"),\n          axis.title.x = element_text(hjust = 0, margin = margin(t = 10)),\n          axis.title.y = element_text(hjust = 1, margin = margin(r = 10)),\n          legend.position = \"bottom\",\n          legend.title = element_text(size = rel(0.7), vjust = 0.5,\n                                      family = \"Noto Sans\", face = \"plain\"),\n          legend.key.size = unit(0.7, \"line\"),\n          legend.key = element_blank(),\n          legend.spacing = unit(0.1, \"lines\"),\n          legend.justification = \"left\",\n          legend.margin = margin(t = -5, b = 0, l = 0, r = 0),\n          strip.text = element_text(size = rel(0.9), hjust = 0,\n                                    family = \"Noto Sans\", face = \"bold\"),\n          strip.background = element_rect(fill = \"white\", colour = NA))\n  \n  if (prior) {\n    ret <- ret +\n      theme(panel.grid.major = element_blank(),\n            axis.title.y = element_blank(),\n            axis.text.y = element_blank(),\n            panel.border = element_blank())\n  } else {\n    ret\n  }\n}\n```\n:::\n\n\n\n\n\n#### `R/funs_models.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Running modelsummary() on Bayesian models takes a while because of all the\n# calculations involved in creating the GOF statistics. With modelsummary 0.7+,\n# though it's now possible to build the base model with modelsummary(..., output\n# = \"modelsummary_list\"), save that as an intermediate object, and then feed it\n# through modelsummary() again with whatever other output you want. The\n# modelsummary_list-based object thus acts like an output-agnostic ur-model.\n\nbuild_modelsummary <- function(model_df) {\n  msl <- model_df %>% \n    pull(model, name = nice) %>% \n    modelsummary::modelsummary(output = \"modelsummary_list\",\n                               statistic = \"[{conf.low}, {conf.high}]\",\n                               ci_method = \"hdi\",\n                               metrics = c(\"R2\"))\n  return(msl)\n}\n\n# This is how to get other stats like ELPD (using metrics = \"LOOIC\" is required\n# for that; metrics = \"R2\" provides nobs). I would do this for all the summary\n# tables, but for whatever reason, it takes forever to calculate ELPD/LOO stuff\n# on ordered logit models, so we just show N instead\n#\n# gm <- tribble(\n#   ~raw,        ~clean,      ~fmt, ~omit,\n#   \"nobs\",      \"N\",         0,    FALSE,\n#   \"r.squared\", \"R2\",        3,    FALSE,\n#   \"elpd\",      \"ELPD\",      1,    FALSE,\n#   \"elpd.se\",   \"ELPD (SE)\", 1,    FALSE\n# )\n# \n# modelsummary(models_policies,\n#              estimate = \"{estimate}\",\n#              statistic = \"conf.int\",\n#              gof_map = gm,\n#              metrics = c(\"R2\", \"LOOIC\"))\n\ngof_map <- tribble(\n  ~raw,          ~clean,                 ~fmt, ~omit,\n  \"nobs\",        \"N\",                    0,    FALSE,\n  \"r.squared\",   \"\\\\(R^2\\\\) (total)\",    2,    FALSE,\n  \"r2.marginal\", \"\\\\(R^2\\\\) (marginal)\", 2,    FALSE\n)\n\ncoef_map <- c(\n  \"b_derogation_ineffect\" = \"Derogation in effect\",\n  \"b_new_cases_z\" = \"New cases (standardized)\",\n  \"b_cumulative_cases_z\" = \"Cumulative cases (standardized)\",\n  \"b_new_deaths_z\" = \"New deaths (standardized)\",\n  \"b_cumulative_deaths_z\" = \"Cumulative deaths (standardized)\",\n  \"b_prior_iccpr_derogationsTRUE\" = \"Past ICCPR derogation\",\n  \"b_prior_iccpr_other_actionTRUE\" = \"Past ICCPR action\",\n  \"b_v2x_rule\" = \"Rule of law\",\n  \"b_v2x_civlib\" = \"Civil liberties\",\n  \"b_v2xcs_ccsi\" = \"Core civil society index\",\n  \"b_Intercept\" = \"Constant\",\n  \"b_Intercept[1]\" = \"Cut 1\",\n  \"b_Intercept[2]\" = \"Cut 2\",\n  \"b_Intercept[3]\" = \"Cut 3\",\n  \"b_year_week_num\" = \"Year-week\",\n  \"sd_country_name__Intercept\" = \"Country random effects σ\",\n  \"sd_who_region__Intercept\" = \"Region random effects σ\"\n)\n\n\n# Model definitions\nf_policies <- function(panel) {\n  BAYES_SEED <- 1757  # From random.org\n  \n  panel <- panel %>% \n    mutate(across(c(new_cases, new_deaths, cumulative_cases, cumulative_deaths),\n                  list(z = ~as.numeric(scale(.)))))\n  \n  # Use .data[[blah]] for tidy evaluation with strings\n  # https://www.tidyverse.org/blog/2019/06/rlang-0-4-0/#other-simple-tidy-evaluation-patterns\n  never_filter <- function(x) {\n    panel %>% \n      filter(.data[[x]] == 0)\n  }\n  \n  logit_priors <- c(prior(student_t(1, 0, 3), class = Intercept),\n                    prior(student_t(1, 0, 3), class = b),\n                    prior(cauchy(0, 1), class = sd, lb = 0))\n  \n  policies_model <- function(y, data) {\n    form <- glue::glue(y, \" ~ derogation_ineffect + new_cases_z + cumulative_cases_z + \",\n                       \"new_deaths_z + cumulative_deaths_z + \",\n                       \"prior_iccpr_derogations + prior_iccpr_other_action + \",\n                       \"v2x_rule + v2x_civlib + v2xcs_ccsi + \",\n                       \"year_week_num + (1 | country_name)\") %>% \n      as.formula()\n    \n    # Use rlang::inject() to evaluate the formula object before running the model\n    # so that the formula shows up correctly in summary(). \n    # See https://community.rstudio.com/t/tidy-evaluation-and-formulae/4561/17\n    rlang::inject(\n      brm(\n        bf(!!form), \n        data = data,\n        family = bernoulli(),\n        prior = logit_priors,\n        chains = 4, seed = BAYES_SEED,\n        threads = threading(2)  # Two CPUs per chain to speed things up\n      )\n    )\n  }\n  \n  policies_models <- tribble(\n    ~nice, ~y, ~never,\n    \"Cancel Public Events\", \"c3_cancel_events_bin\", \"c3_cancel_events_never\",\n    \"Gathering Restrictions\", \"c4_gatherings_bin\", \"c4_gatherings_never\",\n    \"Close Public Transit\", \"c5_public_transport_bin\", \"c5_public_transport_never\",\n    \"Movement\", \"c7_internal_movement_bin\", \"c7_internal_movement_never\",\n    \"International Travel\", \"c8_intl_travel_bin\", \"c8_intl_travel_never\"\n  ) %>% \n    mutate(data = map(never, ~never_filter(.))) %>% \n    mutate(model = map2(y, data, ~policies_model(.x, .y)))\n  \n  return(policies_models)\n}\n\n\nf_human_rights <- function(panel) {\n  BAYES_SEED <- 6440  # From random.org\n  \n  panel <- panel %>% \n    mutate(across(c(new_cases, new_deaths, cumulative_cases, cumulative_deaths),\n                  list(z = ~as.numeric(scale(.)))))\n  \n  logit_priors <- c(prior(student_t(1, 0, 3), class = Intercept),\n                    prior(student_t(1, 0, 3), class = b),\n                    prior(cauchy(0, 1), class = sd, lb = 0))\n  \n  ologit_priors <- c(prior(student_t(1, 0, 3), class = Intercept),\n                     prior(student_t(1, 0, 3), class = b),\n                     prior(cauchy(0, 1), class = sd, lb = 0))\n  \n  # It would be neat to include country random effects but there's not enough\n  # variation within lots of the countries to pick up any of the effect. When \n  # (1 | country_name) is included, the model predicts a 100% chance of \n  # pandem_discrim == 1 and a 0% chance of pandem_discrim == 0, which is\n  # annoying (and it takes 45 minutes to run, ugh)\n  #\n  # So instead we use region random effects\n  human_rights_model <- function(y, family, prior) {\n    form <- glue::glue(y, \" ~ derogation_ineffect + new_cases_z + cumulative_cases_z + \",\n                       \"new_deaths_z + cumulative_deaths_z + \", \n                       \"prior_iccpr_derogations + prior_iccpr_other_action + \",\n                       \"v2x_rule + v2x_civlib + v2xcs_ccsi + \",\n                       \"year_quarter_num + (1 | who_region)\") %>% \n      as.formula()\n    \n    # Use rlang::inject() to evaluate the formula object before running the model\n    # so that the formula shows up correctly in summary(). \n    # See https://community.rstudio.com/t/tidy-evaluation-and-formulae/4561/17\n    rlang::inject(\n      brm(\n        bf(!!form), \n        data = panel,\n        family = family,\n        prior = prior,\n        chains = 4, seed = BAYES_SEED,\n        threads = threading(2)  # Two CPUs per chain to speed things up\n      )\n    )\n  }\n  \n  human_rights_models <- tribble(\n    ~nice, ~y, ~family, ~prior,\n    \"Discriminatory Policy\", \"pandem_discrim\", \"cumulative\", ologit_priors,\n    \"Non-Derogable Rights\", \"pandem_ndrights\", \"bernoulli\", logit_priors,\n    \"No Time Limit Measures\", \"pandem_nolimit\", \"cumulative\", ologit_priors,\n    \"Abusive Enforcement\", \"pandem_abusive\", \"cumulative\", ologit_priors\n  ) %>% \n    # Neat pattern for using named list elements in pmap instead of ..1, ..2, etc.\n    # https://stackoverflow.com/a/66147672/120898\n    # But we can't use that here because of ... issues nested in a function like\n    # this. And there are similar issues when using ..1, ..2, etc. when using\n    # the formula syntax like ~human_rights_model(..1, ..2, ..3). Everything works fine\n    # without the anonymous lambda ~ syntax though\n    mutate(model = pmap(lst(y, family, prior), human_rights_model))\n  \n  return(human_rights_models)\n}\n```\n:::\n\n\n\n\n\n#### `R/funs_plots.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Diagnostic plots\n\nplot_trace <- function(model, params) {\n  model %>% \n    tidybayes::gather_draws(!!!syms(params)) %>% \n    ggplot(aes(x = .iteration, y = .value, color = factor(.chain))) +\n    geom_line(linewidth = 0.1) +\n    scale_color_viridis_d(option = \"rocket\", end = 0.85) +\n    labs(color = \"Chain\") +\n    facet_wrap(vars(.variable), scales = \"free_y\") +\n    theme_pandem()\n}\n\nplot_trank <- function(model, params) {\n  model %>% \n    tidybayes::gather_draws(!!!syms(params)) %>% \n    group_by(.variable) %>% \n    mutate(draw_rank = rank(.value)) %>% \n    ggplot(aes(x = draw_rank, color = factor(.chain))) +\n    stat_bin(geom = \"step\", binwidth = 200, position = position_identity(), boundary = 0) +\n    scale_color_viridis_d(option = \"rocket\", end = 0.85) +\n    labs(color = \"Chain\") +\n    facet_wrap(vars(.variable), scales = \"free_y\") +\n    theme_pandem()\n}\n\nplot_pp <- function(model) {\n  bayesplot::pp_check(model, ndraws = 100, type = \"bars\") +\n    theme_pandem()\n}\n\nfmt_p_inline <- function(x, direction) {\n  x <- round(x, 2)\n  \n  if (direction == \"gt\") {\n    out <- glue::glue(r\"[$p(\\Delta > 0) = {x}$]\")\n  } else {\n    out <- glue::glue(r\"[$p(\\Delta < 0) = {x}$]\")\n  }\n  \n  return(out)\n}\n\n\n# Storing ggplot objects as rds files is BAD \n#   (https://github.com/hadley/ggplot2-book/issues/344)\n#\n# But it's also necessary/recommended when working with {targets}---the basic\n# walkthrough in the manual even shows how to create a plot as a target\n# \n# ggplot objects are strange beasts because they store a copy of the overall\n# environment when serialized into rds files. When working with regular-sized\n# datasets, this isn't really ever a problem. But when working with tidy\n# data frames of MCMC chains with millions and millions of rows, this can create\n# rds files that are hundreds or thousands of MBs, which is wild.\n#\n# This post goes into more details about how to fix it: \n# https://ropensci.org/blog/2022/12/06/save-ggplot2-targets/\n#\n# Instead of using stat_lineribbon() on tidy MCMC draws like I normally do, it's\n# better to collapse the data down first with median_qi() and then use\n# geom_lineribbon(). This results in much tinier data frames and plots render\n# immediately in .qmd files\n\nlibrary(marginaleffects)\n\nbuild_policies_plot_data <- function(model_df, year_week_lookup) {\n  model_df_preds_mfx <- model_df %>% \n    mutate(pred_data = map(model, ~{\n      datagrid(model = .x,\n               year_week_num = 1:69,\n               derogation_ineffect = 0:1) %>% \n        tidybayes::add_epred_draws(.x) %>% \n        left_join(year_week_lookup, by = \"year_week_num\") %>% \n        mutate(derogation_ineffect = factor(derogation_ineffect, \n                                            levels = 0:1,\n                                            labels = c(\"No\", \"Yes\"),\n                                            ordered = TRUE)) %>% \n        group_by(year_week_day, derogation_ineffect) %>% \n        tidybayes::median_qi(.epred, .width = c(0.5, 0.8, 0.95))\n    })) %>% \n    mutate(mfx_data = map(model, ~{\n      .x %>% \n        comparisons(newdata = datagrid(year_week_num = 1:69),\n                    variables = \"derogation_ineffect\",\n                    type = \"response\")  %>%  \n        posterior_draws() %>% \n        left_join(year_week_lookup, by = \"year_week_num\") %>% \n        group_by(year_week_day) %>% \n        reframe(post_medians = tidybayes::median_qi(draw, .width = c(0.5, 0.8, 0.95)),\n                p_gt_0 = sum(draw > 0) / n()) %>% \n        unnest(post_medians) %>% \n        rename(draw = y, .lower = ymin, .upper = ymax)\n    }))\n  \n  return(model_df_preds_mfx)\n}\n\n\nbuild_human_rights_plot_data <- function(model_df, year_quarter_lookup) {\n  model_df_preds_mfx <- model_df %>% \n    mutate(pred_data = map2(model, family, ~{\n      if (.y == \"cumulative\") {\n        df <- datagrid(model = .x,\n                       year_quarter_num = 1:6,\n                       derogation_ineffect = 0:1) %>% \n          tidybayes::add_epred_draws(.x) %>% \n          left_join(year_quarter_lookup, by = \"year_quarter_num\") %>% \n          mutate(derogation_ineffect = factor(derogation_ineffect, \n                                              levels = 0:1,\n                                              labels = c(\"No derogation\", \"Derogation in effect\"),\n                                              ordered = TRUE)) %>% \n          group_by(year_quarter_day, year_quarter, .category, derogation_ineffect) %>% \n          tidybayes::median_qi(.epred, .width = c(0.5, 0.8, 0.95))\n      } else {\n        df <- datagrid(model = .x,\n                       year_quarter_num = 1:6,\n                       derogation_ineffect = 0:1) %>% \n          tidybayes::add_epred_draws(.x) %>% \n          left_join(year_quarter_lookup, by = \"year_quarter_num\") %>% \n          mutate(derogation_ineffect = factor(derogation_ineffect, \n                                              levels = 0:1,\n                                              labels = c(\"No\", \"Yes\"),\n                                              ordered = TRUE)) %>% \n          group_by(year_quarter_day, year_quarter, derogation_ineffect) %>% \n          tidybayes::median_qi(.epred, .width = c(0.5, 0.8, 0.95))\n      }\n    })) %>% \n    mutate(mfx_data = pmap(list(model, family, y), \\(.model, .family, .y) {\n      mfx <- .model %>% \n        comparisons(newdata = datagrid(year_quarter_num = 1:6),\n                    variables = \"derogation_ineffect\",\n                    type = \"response\")  %>%  \n        posterior_draws() %>% \n        left_join(year_quarter_lookup, by = \"year_quarter_num\")\n      \n      if (.family == \"cumulative\") {\n        mfx <- mfx %>% \n          mutate(group = factor(group, levels = levels(.model$data[[.y]]), ordered = TRUE)) %>% \n          group_by(year_quarter_day, year_quarter, group) %>% \n          reframe(post_medians = tidybayes::median_qi(draw, .width = c(0.5, 0.8, 0.95)),\n                  p_gt_0 = sum(draw > 0) / n()) %>% \n          unnest(post_medians) %>% \n          rename(draw = y, .lower = ymin, .upper = ymax)\n      } else {\n        mfx <- mfx %>% \n          group_by(year_quarter_day, year_quarter) %>% \n          reframe(post_medians = tidybayes::median_qi(draw, .width = c(0.5, 0.8, 0.95)),\n                  p_gt_0 = sum(draw > 0) / n()) %>% \n          unnest(post_medians) %>% \n          rename(draw = y, .lower = ymin, .upper = ymax) %>% \n          mutate(group = \"Logit\")\n      }\n      \n      mfx\n    }))\n  \n  return(model_df_preds_mfx)\n}\n\nbuild_policies_table_data <- function(model_df) {\n  policies_pred_tbl <- model_df %>% \n    unnest(pred_data) %>% \n    filter(.width == 0.95) %>% \n    select(nice, year_week_day, derogation_ineffect, .epred, .lower, .upper) %>% \n    group_by(nice, derogation_ineffect) %>% \n    mutate(rank = dense_rank(.epred)) %>% \n    filter(rank == 1 | rank == max(rank)) %>% \n    mutate(rank = ifelse(rank == 1, \"min\", \"max\")) %>% \n    group_by(rank, derogation_ineffect) %>% \n    mutate(outcome = janitor::make_clean_names(nice)) %>%\n    rename(draw = .epred, min = .lower, max = .upper) %>% \n    mutate(across(c(draw, min, max), list(nice = ~round(. * 100, 0)))) %>% \n    ungroup()\n\n  policies_mfx_tbl <- model_df %>% \n    unnest(mfx_data) %>% \n    filter(.width == 0.95) %>% \n    select(nice, year_week_day, draw, .lower, .upper, p_gt_0, .width) %>% \n    group_by(nice) %>% \n    mutate(rank = dense_rank(draw)) %>% \n    filter(rank == 1 | rank == max(rank)) %>% \n    mutate(rank = ifelse(rank == 1, \"min\", \"max\")) %>% \n    group_by(rank) %>% \n    mutate(outcome = janitor::make_clean_names(nice)) %>%\n    rename(min = .lower, max = .upper) %>% \n    mutate(across(c(draw, min, max), list(nice = ~round(. * 100, 0))),\n           p_lt_0 = p_gt_0 - 1) %>% \n    mutate(p_gt = fmt_p_inline(p_gt_0, \"gt\"),\n           p_lt = fmt_p_inline(p_lt_0, \"lt\")) %>% \n    ungroup()\n  \n  return(lst(policies_pred_tbl, policies_mfx_tbl))\n}\n\nbuild_hr_table_data <- function(model_df) {\n  hr_pred_tbl <- model_df %>% \n    mutate(pred_data = map(pred_data, ~{\n      .x %>% \n        mutate(derogation_ineffect = as.character(derogation_ineffect),\n               derogation_ineffect = recode(derogation_ineffect,\n                                            \"No derogation\" = \"No\",\n                                            \"Derogation in effect\" = \"Yes\"))\n    })) %>% \n    unnest(pred_data) %>% \n    filter(.width == 0.95) %>% \n    select(nice, year_quarter_day, derogation_ineffect, .category, .epred, .lower, .upper) %>% \n    group_by(nice, derogation_ineffect, .category) %>% \n    mutate(rank = dense_rank(.epred)) %>% \n    filter(rank == 1 | rank == max(rank)) %>% \n    mutate(rank = ifelse(rank == 1, \"min\", \"max\")) %>% \n    group_by(rank, derogation_ineffect, .category) %>% \n    mutate(outcome = janitor::make_clean_names(nice)) %>%\n    rename(draw = .epred, min = .lower, max = .upper) %>% \n    mutate(across(c(draw, min, max), list(nice = ~round(. * 100, 0)))) %>% \n    ungroup() %>% \n    mutate(category = ifelse(is.na(.category), \"NA\", as.character(.category)))\n  \n  hr_mfx_tbl <- model_df %>% \n    mutate(mfx_data = map(mfx_data, ~{\n      .x %>% \n        mutate(group = as.character(group))\n    })) %>% \n    unnest(mfx_data) %>% \n    filter(.width == 0.95) %>% \n    select(nice, year_quarter_day, group, draw, .lower, .upper, p_gt_0, .width) %>% \n    group_by(nice, group) %>% \n    mutate(rank = dense_rank(draw)) %>% \n    filter(rank == 1 | rank == max(rank)) %>% \n    mutate(rank = ifelse(rank == 1, \"min\", \"max\")) %>% \n    group_by(rank, group) %>% \n    mutate(outcome = janitor::make_clean_names(nice)) %>%\n    rename(min = .lower, max = .upper) %>% \n    mutate(across(c(draw, min, max), list(nice = ~round(. * 100, 0))),\n           p_lt_0 = 1 - p_gt_0) %>% \n    mutate(p_gt = fmt_p_inline(p_gt_0, \"gt\"),\n           p_lt = fmt_p_inline(p_lt_0, \"lt\")) %>% \n    ungroup()\n  \n  return(lst(hr_pred_tbl, hr_mfx_tbl))\n}\n```\n:::\n\n\n\n\n\n",
    "supporting": [
      "targets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}